// <auto-generated/>
#pragma warning disable 1591
#pragma warning disable 0414
#pragma warning disable 0649
#pragma warning disable 0169

namespace RustaConsumerList.Pages
{
    #line hidden
    using System;
#nullable restore
#line 1 "D:\repos\Rusta\RustaConsumerList\_Imports.razor"
using System.Net.Http;

#line default
#line hidden
#nullable disable
#nullable restore
#line 2 "D:\repos\Rusta\RustaConsumerList\_Imports.razor"
using Microsoft.AspNetCore.Authorization;

#line default
#line hidden
#nullable disable
#nullable restore
#line 3 "D:\repos\Rusta\RustaConsumerList\_Imports.razor"
using Microsoft.AspNetCore.Components.Authorization;

#line default
#line hidden
#nullable disable
#nullable restore
#line 5 "D:\repos\Rusta\RustaConsumerList\_Imports.razor"
using Microsoft.AspNetCore.Components.Routing;

#line default
#line hidden
#nullable disable
#nullable restore
#line 6 "D:\repos\Rusta\RustaConsumerList\_Imports.razor"
using Microsoft.AspNetCore.Components.Web;

#line default
#line hidden
#nullable disable
#nullable restore
#line 7 "D:\repos\Rusta\RustaConsumerList\_Imports.razor"
using Microsoft.AspNetCore.Components.Web.Virtualization;

#line default
#line hidden
#nullable disable
#nullable restore
#line 8 "D:\repos\Rusta\RustaConsumerList\_Imports.razor"
using Microsoft.JSInterop;

#line default
#line hidden
#nullable disable
#nullable restore
#line 9 "D:\repos\Rusta\RustaConsumerList\_Imports.razor"
using RustaConsumerList;

#line default
#line hidden
#nullable disable
#nullable restore
#line 10 "D:\repos\Rusta\RustaConsumerList\_Imports.razor"
using RustaConsumerList.Shared;

#line default
#line hidden
#nullable disable
#nullable restore
#line 2 "D:\repos\Rusta\RustaConsumerList\Pages\Databas.razor"
using RustaConsumerList.Pages;

#line default
#line hidden
#nullable disable
#nullable restore
#line 3 "D:\repos\Rusta\RustaConsumerList\Pages\Databas.razor"
using Microsoft.AspNetCore.Components;

#line default
#line hidden
#nullable disable
#nullable restore
#line 4 "D:\repos\Rusta\RustaConsumerList\Pages\Databas.razor"
using Microsoft.AspNetCore.Hosting;

#line default
#line hidden
#nullable disable
#nullable restore
#line 5 "D:\repos\Rusta\RustaConsumerList\Pages\Databas.razor"
using Microsoft.AspNetCore.Components.Forms;

#line default
#line hidden
#nullable disable
#nullable restore
#line 6 "D:\repos\Rusta\RustaConsumerList\Pages\Databas.razor"
using Blazority;

#line default
#line hidden
#nullable disable
#nullable restore
#line 7 "D:\repos\Rusta\RustaConsumerList\Pages\Databas.razor"
using System.Threading.Tasks;

#line default
#line hidden
#nullable disable
#nullable restore
#line 8 "D:\repos\Rusta\RustaConsumerList\Pages\Databas.razor"
using System.Linq;

#line default
#line hidden
#nullable disable
#nullable restore
#line 9 "D:\repos\Rusta\RustaConsumerList\Pages\Databas.razor"
using System.IO;

#line default
#line hidden
#nullable disable
#nullable restore
#line 10 "D:\repos\Rusta\RustaConsumerList\Pages\Databas.razor"
using System.Collections.Generic;

#line default
#line hidden
#nullable disable
#nullable restore
#line 11 "D:\repos\Rusta\RustaConsumerList\Pages\Databas.razor"
using RustaConsumerList.Models;

#line default
#line hidden
#nullable disable
#nullable restore
#line 12 "D:\repos\Rusta\RustaConsumerList\Pages\Databas.razor"
using RustaConsumerList.Services;

#line default
#line hidden
#nullable disable
    [Microsoft.AspNetCore.Components.RouteAttribute("/DB")]
    public partial class Databas : Microsoft.AspNetCore.Components.ComponentBase
    {
        #pragma warning disable 1998
        protected override void BuildRenderTree(Microsoft.AspNetCore.Components.Rendering.RenderTreeBuilder __builder)
        {
        }
        #pragma warning restore 1998
#nullable restore
#line 34 "D:\repos\Rusta\RustaConsumerList\Pages\Databas.razor"
 

    public List<ConsumptionProduct> Products = new();
    private List<ConsumptionProduct> NewExcelList = new();
    private List<ConsumptionProduct> ProductsToRemove = new();
    private List<ConsumptionProduct> ProductsToAdd = new();
    private List<ConsumptionProduct> ProductsToUpdate = new();

    bool Error = false;

    string ErrorMessage { get; set; }

    public int removed { get; set; }
    public int added { get; set; }

    protected override async Task OnInitializedAsync()
    {
        Products = (await ConItemDb.Get()).ToList();
        this.StateHasChanged();
    }

    string Message = "No file selected";
    IReadOnlyList<IBrowserFile> selectedFiles;

    async void OnInputFileChange(InputFileChangeEventArgs e)
    {
        Error = false;
        selectedFiles = e.GetMultipleFiles();
        Message = $"{selectedFiles.Count} file selected";
        //try
        //{
        await PreviewList();
        //}
        //catch (Exception ex)
        //{
        //Error = true;
        //ErrorMessage = ex.ToString();
        //}
        this.StateHasChanged();
    }

    public async Task PreviewList()
    {
        if (selectedFiles != null)
        {
            foreach (var file in selectedFiles)
            {
                //Behövs för filstorlek
                Stream stream = file.OpenReadStream(10140555, default);
                var path = $"{env.WebRootPath}\\db.xlsx";
                FileStream fs = File.Create(path);
                await stream.CopyToAsync(fs);
                stream.Close();
                fs.Close();
            }

            ConsumptionProduct excelProduct = new();
            NewExcelList = excelProduct.MassImportProducts();

            if(NewExcelList.Count() <= 0)
            {
                Error = true;
            }
            else
            {
                Products = new();
                Products = (await ConItemDb.Get()).ToList();

                ProductsToRemove = new();
                ProductsToAdd = new();
                ProductsToUpdate = new();

                ProductsToRemove = Products.Where(item => NewExcelList.Any(item2 => item.Id != item2.Id)).ToList();
                foreach(var p in ProductsToRemove)
                {
                    Products.Remove(p);
                }

                ProductsToAdd = NewExcelList.Where(item => Products.All(item2 => item.Id != item2.Id)).ToList();
                foreach (var p in ProductsToAdd)
                {
                    Products.Add(p);
                }

                ProductsToUpdate = Products.Where(item => NewExcelList.All(item2 => item.Id == item2.Id && (item.Name != item2.Name || item.Category != item2.Category))).ToList();
                foreach (var p in ProductsToUpdate)
                {
                    foreach(var p2 in Products)
                    {
                        if(p2.Id == p.Id)
                        {
                            p2.Name = p.Name;
                            p2.Category = p.Category;
                        }
                    }
                }
            }
        }
    }

    public async Task AddProducts()
    {
        foreach (var p in ProductsToAdd)
        {
            await ConItemDb.Insert(p);
        }

        foreach (var p in ProductsToRemove)
        {
            await ConItemDb.Delete(p);
        }

        foreach (var p in ProductsToUpdate)
        {
            await ConItemDb.Update(p);
        }
    }


#line default
#line hidden
#nullable disable
        [global::Microsoft.AspNetCore.Components.InjectAttribute] private IWebHostEnvironment env { get; set; }
        [global::Microsoft.AspNetCore.Components.InjectAttribute] private ConsItemService ConItemDb { get; set; }
    }
}
#pragma warning restore 1591
