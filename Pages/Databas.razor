@page "/DB"
@using RustaConsumerList.Pages
@using Microsoft.AspNetCore.Components;
@using Microsoft.AspNetCore.Hosting
@using Microsoft.AspNetCore.Components.Forms
@using Blazority;
@using System.Threading.Tasks;
@using System.Linq;
@using System.IO;
@using System.Collections.Generic;
@using RustaConsumerList.Models;
@using RustaConsumerList.Services;

@inject ConsItemService ConItemDb
@inject IWebHostEnvironment env

<div style="height:60px"></div>
<div style="padding-left:12px;padding-right:12px;">
    <InputFile OnChange="OnInputFileChange" multiple />
    @if (Error) { <p>Fel med filen. @ErrorMessage</p> }
    <br />
    @if (!spinner && !NoFile) {<Button Variant="Primary" Disabled="Success" OnClick="() => AddProducts()">Skapa</Button> }
    else if (spinner || Error || NoFile){ <Button Variant="Primary" Disabled OnClick="() => AddProducts()">Skapa</Button> }
    
    @if (spinner) { <Spinner Size="SpinnerSize.Small"></Spinner> <h4>@Done/@ProductsToDo klart.</h4>}
    else if (Success) { <h4>Success!</h4>}
    <br />

    <Datagrid Items="Products" GroupBy="u => u.Category" Compact="true">
        <DatagridColumn Title="Article Number" TRowData="ConsumptionProduct" Field="c => c.Id" CanSort="true" />
        <DatagridColumn Title="Article Name" TRowData="ConsumptionProduct" Field="c => c.Name" CanSort="true" />
    </Datagrid>
</div>


@code
{

    public List<ConsumptionProduct> Products = new();
    private List<ConsumptionProduct> NewExcelList = new();
    private List<ConsumptionProduct> ProductsToRemove = new();
    private List<ConsumptionProduct> ProductsToAdd = new();
    private List<ConsumptionProduct> ProductsToUpdate = new();

    bool Error = false;
    bool spinner = false;
    bool Success = false;
    bool NoFile = true;

    int Done { get; set; }
    int ProductsToDo { get; set; }

    string ErrorMessage { get; set; }

    protected override async Task OnInitializedAsync()
    {
        Products = (await ConItemDb.Get()).ToList();
        this.StateHasChanged();
    }

    string Message = "No file selected";
    IReadOnlyList<IBrowserFile> selectedFiles;

    async void OnInputFileChange(InputFileChangeEventArgs e)
    {
        Error = false;
        spinner = false;
        Success = false;
        NoFile = false;

        selectedFiles = e.GetMultipleFiles();
        Message = $"{selectedFiles.Count} file selected";
        try
        {
            await PreviewList();
        }
        catch (Exception ex)
        {
            Error = true;
            ErrorMessage = ex.ToString();
        }
        this.StateHasChanged();
    }

    public async Task PreviewList()
    {
        if (selectedFiles != null)
        {
            foreach (var file in selectedFiles)
            {
                //Behövs för filstorlek
                Stream stream = file.OpenReadStream(10140555, default);
                var path = $"{env.WebRootPath}\\db.xlsx";
                FileStream fs = File.Create(path);
                await stream.CopyToAsync(fs);
                stream.Close();
                fs.Close();
            }

            ConsumptionProduct excelProduct = new();
            NewExcelList = excelProduct.MassImportProducts();

            if(NewExcelList.Count() <= 0)
            {
                Error = true;
            }
            else
            {
                Products = new();
                Products = (await ConItemDb.Get()).ToList();

                ProductsToRemove = Products.Where(aItem => NewExcelList.All(bItem => aItem.Id != bItem.Id)).ToList();
                Products.RemoveAll(aItem => NewExcelList.All(bItem => aItem.Id != bItem.Id));
                Products.ForEach(aItem => { aItem.Name = NewExcelList.First(bItem => aItem.Id == bItem.Id).Name; aItem.Category = NewExcelList.First(bItem => aItem.Id == bItem.Id).Category;});
                ProductsToAdd = NewExcelList.Where(bItem => Products.All(aItem => aItem.Id != bItem.Id)).ToList();
                Products.AddRange(NewExcelList.Where(bItem => Products.All(aItem => aItem.Id != bItem.Id)));

            }
        }
    }

    public async Task AddProducts()
    {
        spinner = true;
        Success = false;

        ProductsToDo = ProductsToRemove.Count() + ProductsToAdd.Count() + Products.Count();
        Done = 0;

        foreach (var p in ProductsToRemove)
        {
            await ConItemDb.Delete(p.Id);
            Done++;
            this.StateHasChanged();
        }

        foreach(var p in Products)
        {
            await ConItemDb.Update(p);
            Done++;
            this.StateHasChanged();
        }

        foreach (var p in ProductsToAdd)
        {
            await ConItemDb.Insert(p);
            Done++;
            this.StateHasChanged();
        }


        Products = new();
        Products = (await ConItemDb.Get()).ToList();
        spinner = false;
        Success = true;
        selectedFiles = null;
        this.StateHasChanged();
    }
}