@page "/DB"
@using RustaConsumerList.Pages
@using Microsoft.AspNetCore.Components;
@using Microsoft.AspNetCore.Hosting
@using Microsoft.AspNetCore.Components.Forms
@using Blazority;
@using System.Threading.Tasks;
@using System.Linq;
@using System.IO;
@using System.Collections.Generic;
@using RustaConsumerList.Models;
@using RustaConsumerList.Services;

@inject ConsItemService ConItemDb
@inject IWebHostEnvironment env

<div style="height:60px"></div>
<div style="padding-left:12px;padding-right:12px;">
    <InputFile OnChange="OnInputFileChange" multiple />
    @if (Error) { <p>Fel med filen. @ErrorMessage</p> }
    <p> Remove: @ProductsToRemove.Count() Add: @ProductsToAdd.Count() Update: @ProductsToUpdate.Count() </p>
    <br />
    <Button Variant="Primary" OnClick="() => AddProducts()">Skapa</Button>
    <br />

    <Datagrid Items="Products" GroupBy="u => u.Category" Compact="true">
        <DatagridColumn Title="Article Number" TRowData="ConsumptionProduct" Field="c => c.Id" CanSort="true" />
        <DatagridColumn Title="Article Name" TRowData="ConsumptionProduct" Field="c => c.Name" CanSort="true" />
    </Datagrid>
</div>


@code
{

    public List<ConsumptionProduct> Products = new();
    private List<ConsumptionProduct> NewExcelList = new();
    private List<ConsumptionProduct> ProductsToRemove = new();
    private List<ConsumptionProduct> ProductsToAdd = new();
    private List<ConsumptionProduct> ProductsToUpdate = new();

    bool Error = false;

    string ErrorMessage { get; set; }

    public int removed { get; set; }
    public int added { get; set; }

    protected override async Task OnInitializedAsync()
    {
        Products = (await ConItemDb.Get()).ToList();
        this.StateHasChanged();
    }

    string Message = "No file selected";
    IReadOnlyList<IBrowserFile> selectedFiles;

    async void OnInputFileChange(InputFileChangeEventArgs e)
    {
        Error = false;
        selectedFiles = e.GetMultipleFiles();
        Message = $"{selectedFiles.Count} file selected";
        //try
        //{
        await PreviewList();
        //}
        //catch (Exception ex)
        //{
        //Error = true;
        //ErrorMessage = ex.ToString();
        //}
        this.StateHasChanged();
    }

    public async Task PreviewList()
    {
        if (selectedFiles != null)
        {
            foreach (var file in selectedFiles)
            {
                //Behövs för filstorlek
                Stream stream = file.OpenReadStream(10140555, default);
                var path = $"{env.WebRootPath}\\db.xlsx";
                FileStream fs = File.Create(path);
                await stream.CopyToAsync(fs);
                stream.Close();
                fs.Close();
            }

            ConsumptionProduct excelProduct = new();
            NewExcelList = excelProduct.MassImportProducts();

            if(NewExcelList.Count() <= 0)
            {
                Error = true;
            }
            else
            {
                Products = new();
                Products = (await ConItemDb.Get()).ToList();

                ProductsToRemove = new();
                ProductsToAdd = new();
                ProductsToUpdate = new();

                ProductsToRemove = Products.Where(item => NewExcelList.Any(item2 => item.Id != item2.Id)).ToList();
                foreach(var p in ProductsToRemove)
                {
                    Products.Remove(p);
                }

                ProductsToAdd = NewExcelList.Where(item => Products.All(item2 => item.Id != item2.Id)).ToList();
                foreach (var p in ProductsToAdd)
                {
                    Products.Add(p);
                }

                ProductsToUpdate = Products.Where(item => NewExcelList.All(item2 => item.Id == item2.Id && (item.Name != item2.Name || item.Category != item2.Category))).ToList();
                foreach (var p in ProductsToUpdate)
                {
                    foreach(var p2 in Products)
                    {
                        if(p2.Id == p.Id)
                        {
                            p2.Name = p.Name;
                            p2.Category = p.Category;
                        }
                    }
                }
            }
        }
    }

    public async Task AddProducts()
    {
        foreach (var p in ProductsToAdd)
        {
            await ConItemDb.Insert(p);
        }

        foreach (var p in ProductsToRemove)
        {
            await ConItemDb.Delete(p);
        }

        foreach (var p in ProductsToUpdate)
        {
            await ConItemDb.Update(p);
        }
    }

}