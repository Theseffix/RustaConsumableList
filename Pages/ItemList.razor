@page "/"
@using RustaConsumerList.Pages
@using Microsoft.AspNetCore.Components;
@using Microsoft.AspNetCore.Hosting
@using Microsoft.AspNetCore.Components.Forms
@using Blazority;
@using BlazorInputFile; 
@using System.Threading.Tasks;
@using System.Linq;
@using System.IO;
@using System.Collections.Generic;
@using RustaConsumerList.Models;
@using RustaConsumerList.Services;

@inject ConsItemService ConItemDb

<link href="/css/RustaStyleSheet.css" rel="stylesheet" type="text/css" />

<div style="position:fixed;z-index:99;min-width:165px;height:50px;" @onclick="() => HomeDiv_Click()"></div>

<div style="height:60px"></div>
<div style="width:90%;margin-left:auto;margin-right:auto">
    <div style="width:100%;">
        <br />
        @if (!CategoryClicked)
        {
            @foreach (string Category in Categories)
            {
                <div class="DivSize hoverOutline" @onclick="() => DivClicked(Category)">
                    <img class="imageSize" src="/images/ImageMissing.png" alt="Image Missing" asp-append-version="true" />
                    <p class="limit">@Category</p>
                </div>
            }
        }

        @if (CategoryClicked)
        {
            <textbox>@TestDouble</textbox>
            RowList = new();

            @foreach (var item in AllItems)
            {
                @if (NewRow == 7)
                {
                    NewRow = 0;
                    BoolList.Add(true);


                    <div class="DropDownSize" hidden="@BoolList[NewRowId]">
                        <div style="padding-left:6px;padding-right:6px;">
                            <Tabs>
                                <Tab>
                                    <Header>Produktinformation</Header>
                                    <ChildContent>
                                        <p>@ProductId</p>
                                        <p>@ProductName</p>
                                        <br />
                                        <p>
                                            Här kommer det produktbeskrivning... bla bla bla.
                                        </p>
                                    </ChildContent>
                                </Tab>
                                <Tab>
                                    <Header>Bilder</Header>
                                    <ChildContent>

                                        <div style="border-top:2px solid black;width:100%;min-height:6px;">
                                            <BlazorInputFile.InputFile OnChange="HandleSelection"/>
                                        </div>
                                    </ChildContent>
                                </Tab>
                                <Tab>
                                    <Header>Kommentarer(0)</Header>
                                    <ChildContent><p>Här kommer ett forum för kommentarer</p></ChildContent>
                                </Tab>
                            </Tabs>
                        </div>
                    </div>
                    NewRowId++;
                }

                if (item.Category == CatChoise)
                {
                    NewRow++;
                    RowList.Add(NewRowId);
                    item.DynamicRow = NewRowId;

                    if (item.Id == LastClickedDivId)
                    {
                        <div class="DivSize hoverOutline" style="outline: 2px solid gray" @onclick="e => Div_Click(item.DynamicRow, item.Id, item.Name)">
                            <img class="imageSize" src="/images/ImageMissing.png" alt="Image Missing" />
                            <p class="limit">@item.Name</p>
                            <p class="limit">@item.Id</p>
                        </div>
                    }
                    else
                    {
                        <div class="DivSize hoverOutline" @onclick="e => Div_Click(item.DynamicRow, item.Id, item.Name)">
                            <img class="imageSize" src="/images/ImageMissing.png" alt="Image Missing" />
                            <p class="limit">@item.Name</p>
                            <p class="limit">@item.Id</p>
                        </div>
                    }

                }
            }

            NewRow = 0;
            BoolList.Add(true);


            <div class="DropDownSize" hidden="@BoolList[NewRowId]">
                <p>@BoolList[NewRowId]</p>
            </div>

            NewRowId = 0;
            NewRow = 0;
        }
    </div>
</div>


@code{

    public double ProductId { get; set; }
    public string ProductName { get; set; }

    public string TestDouble { get; set; }
    public string Image { get; set; }
    public string Status { get; set; }
    public int NewRow { get; set; }
    public int NewRowId = 0;
    public double LastClickedDivId = 0;
    public bool showit = false;
    public List<bool> BoolList { get; set; }
    public List<int> RowList { get; set; }

    protected override async Task OnInitializedAsync()
    {
        BoolList = new();
        RowList = new();
        NewRow = 0;
        NewRowId = 0;
        AllItems = (await ConItemDb.GetItems()).ToList();
        foreach (var item in AllItems)
        {
            if (!Categories.Contains(item.Category))
            {
                Categories.Add(item.Category);
            }
        }
        this.StateHasChanged();
    }

    public void HomeDiv_Click()
    {
        CategoryClicked = false;
        BoolList = new();
        this.StateHasChanged();
    }

    public void Div_Click(int RowId, double DivId, string DivName)
    {
        if (BoolList.Contains(false))
        {
            for (int i = 0; i < BoolList.Count(); i++)
            {
                if(i != RowId)
                {
                    BoolList[i] = true;
                }
            }
        }
        if (LastClickedDivId == DivId)
        {
            BoolList[RowId] = !BoolList[RowId];
        }
        else
        {
            BoolList[RowId] = false;
            LastClickedDivId = DivId;
            ProductId = DivId;
            ProductName = DivName;
        }
        StateHasChanged();
    }

    async Task HandleSelection(IFileListEntry[] files)
    {
        if (files != null)
        {
            foreach(var f in files)
            {
                ProductImage PI = new();

                var ms = new MemoryStream();
                await f.Data.CopyToAsync(ms);

                PI.Image = ms.ToArray();
                await ConItemDb.InsertImageToItem(PI, LastClickedDivId);
            }

            Status = $" {files.Count()} filer.";
        }
    }

    #region Categorys
    public List<ConsumptionProduct> AllItems = new List<ConsumptionProduct>();
    public static List<string> Categories = new List<string>();

    public static bool CategoryClicked = false;

    public static string CatChoise = "";

    private async Task DivClicked(string Category)
    {
        CategoryClicked = true;
        CatChoise = Category;
    }
    #endregion

}